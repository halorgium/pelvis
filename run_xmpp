#!/usr/bin/env ruby

require 'rubygems'

require File.dirname(__FILE__) + '/lib/pelvis'
require 'pelvis/protocols/xmpp'

require File.dirname(__FILE__) + '/examples/actors/herault'
require File.dirname(__FILE__) + '/examples/actors/randomz'
require File.dirname(__FILE__) + '/examples/actors/chained'
require File.dirname(__FILE__) + '/examples/actors/inner'

module Logging
  def receive(data)
    log "Received data: #{data.inspect}"
  end

  def complete(event)
    log "Completed with #{event.inspect}"
  end

  def log(message)
    puts "%0.7f: %s" % [Time.now.to_f, message]
  end
end

#Pelvis::LOGGER.level = Logger::WARN
#Blather::LOG.level = Logger::DEBUG

EM.run do
  Pelvis.connect(:xmpp, {:jid => "herault@localhost/agent", :password => "testing"}, [Herault]) do |agent|
    puts "herault is ready"
  end

  Pelvis.connect(:xmpp, {:jid => "dummy@localhost/agent", :password => "testing"}, [Randomz, Chained]) do |agent|
    puts "chained is ready"
  end

  Pelvis.connect(:xmpp, {:jid => "dummy2@localhost/agent", :password => "testing"}, [Inner]) do |agent|
    puts "inner is ready"
  end

  Pelvis.connect(:xmpp, {:jid => "admin@localhost/agent", :password => "testing"}) do |agent|
    puts "bar is ready"
    o = agent.request(:all, "/chained", {}, :callback => Logging)
    o = agent.request(:all, "/do/random", {}, :callback => Logging)
  end
end
